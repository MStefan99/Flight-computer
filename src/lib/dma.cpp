#include "lib/dma.h"


dmac_descriptor_registers_t dma::DESCRIPTOR_TABLE[DMA_CH_COUNT];
dmac_descriptor_registers_t dma::WRITE_BACK_DESCRIPTOR_TABLE[DMA_CH_COUNT];


void dma::initI2C() {
	// DMA config
	DMAC_REGS->DMAC_BASEADDR = (uint32_t)dma::DESCRIPTOR_TABLE;
	DMAC_REGS->DMAC_WRBADDR = (uint32_t)dma::WRITE_BACK_DESCRIPTOR_TABLE;
	DMAC_REGS->DMAC_CTRL = DMAC_CTRL_LVLEN0(1)
					| DMAC_CTRL_DMAENABLE(1);

	// DMA I2C TX config
	DMAC_REGS->DMAC_CHID = DMA_CH_I2C_TX;
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT_BEAT
					| DMAC_CHCTRLB_TRIGSRC_SERCOM0_TX;
	DMAC_REGS->DMAC_CHINTENSET = DMAC_CHINTENSET_TCMPL(1) | DMAC_CHINTENSET_TERR(1);

	dma::DESCRIPTOR_TABLE[DMA_CH_I2C_TX].DMAC_BTCTRL = DMAC_BTCTRL_BEATSIZE_BYTE
					| DMAC_BTCTRL_SRCINC(1)
					| DMAC_BTCTRL_VALID(1);

	// DMA I2C RX config
	DMAC_REGS->DMAC_CHID = DMA_CH_I2C_RX;
	DMAC_REGS->DMAC_CHCTRLB = DMAC_CHCTRLB_TRIGACT_BEAT
					| DMAC_CHCTRLB_TRIGSRC_SERCOM0_RX;
	DMAC_REGS->DMAC_CHINTENSET = DMAC_CHINTENSET_TCMPL(1) | DMAC_CHINTENSET_TERR(1);

	dma::DESCRIPTOR_TABLE[DMA_CH_I2C_RX].DMAC_BTCTRL = DMAC_BTCTRL_BEATSIZE_BYTE
					| DMAC_BTCTRL_DSTINC(1)
					| DMAC_BTCTRL_VALID(1);

	// Interrupt config
	NVIC_EnableIRQ(DMAC_0_IRQn);
	NVIC_EnableIRQ(DMAC_1_IRQn);
}
